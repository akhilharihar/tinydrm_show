#!/usr/bin/env python3
import argparse
from pathlib import Path
from os import uname
import shutil
import importlib

__cwd = Path(__file__).parent.absolute()


def driver_configure(drv_name: str, out: Path) -> bool:
    src = __cwd / "drivers"
    out = out / "driver"
    out.mkdir(parents=True)
    shutil.copy(src / f"{drv_name}.c", out)

    kernelsrctarget = "\tif [[ ! -d /lib/modules/$(uname -r)/build ]]; then \\\n"
    kernelsrctarget += "\tsudo apt update && sudo apt install -y git bc bison flex libssl-dev libncurses5-dev && \\\n"
    kernelsrctarget += "\tsudo wget https://raw.githubusercontent.com/RPi-Distro/rpi-source/master/rpi-source -O /usr/local/bin/rpi-source && \\\n"
    kernelsrctarget += "\tsudo chmod +x /usr/local/bin/rpi-source && /usr/local/bin/rpi-source -q --tag-update; \\\n\tfi\n"

    installtarget = f"\tif [[ -f ./{drv_name}.ko ]]; then \\\n"
    installtarget += f"\tcp ./{drv_name}.ko /lib/modules/`uname -r`/kernel/drivers/gpu/drm/tiny/ && \\\n"
    installtarget += "\tdepmod;\\\n\tfi\n"

    with open(out / "Makefile", "w") as f:
        makefile = "SHELL := /bin/bash\n"
        makefile += f"KDIR := /lib/modules/`uname -r`/build\nMODULES := {drv_name}.ko\nobj-m += {drv_name}.o\ndefault: all\n"
        makefile += "clean:\n\t$(MAKE) -C $(KDIR) M=$(PWD) clean\nall: kernelsrc\n\trpi-source\n\t$(MAKE) -C $(KDIR) M=$(PWD) modules\n"
        makefile += f"kernelsrc:\n{kernelsrctarget}\n"
        makefile += f"install:\n{installtarget}"
        f.write(makefile)
    return True


def overlay_configure(drv_name: str, out: Path) -> bool:
    src = __cwd / "overlays"
    ov_py = (src / f"{drv_name}.py").exists()
    ov_dts = (src / f"{drv_name}.dts").exists()

    if(not (ov_py or ov_dts)):
        print(f"An overlay for {drv_name} does not exist")
        return False

    out = out / "overlay"
    out.mkdir(parents=True)

    fname = None

    if(ov_py):
        drv_pkg = importlib.import_module("overlays" + "." + drv_name)
        drv_cls = getattr(drv_pkg, drv_name.upper())
        anot = drv_cls()
        fname = f"{drv_name}_{anot.res}"
        with open(out / f"{fname}.dts", "w") as f:
            f.write(anot.dts())
    else:
        fname = f"{drv_name}"
        shutil.copy(src / f"{fname}.dts", out)

    installtarget = f"\tif [[ -f ./{fname}.dtbo ]]; then \\\n"
    installtarget += f"\tcp ./{fname}.dtbo /boot/overlays/ ; \\\n\tfi\n"

    with open(out / "Makefile", "w") as f:
        makefile = f"SHELL := /bin/bash\nall:\n\tdtc -@ -I dts -O dtb -o {out/fname}.dtbo {out / fname}.dts\n"
        makefile += f"install:\n{installtarget}"
        f.write(makefile)

    return True


if __name__ == "__main__":
    driver_src = __cwd / "drivers"
    overlay_src = __cwd / "overlays"

    driver_install_path = Path(f'/lib/modules/{uname()[2]}/kernel/drivers/gpu/drm/tiny')
    installed_drivers = [x.stem for x in list(driver_install_path.glob('*.ko'))]
    drivers = [x.stem for x in list(driver_src.glob('*.c'))]
    drivers.extend(installed_drivers)
    drivers = list(set(drivers))

    parser = argparse.ArgumentParser(description='Build setup for tiny DRM display drivers and overlays')
    parser.add_argument("driver", choices=drivers, help="Name of the tiny DRM driver")
    args = parser.parse_args()

    build_dir = __cwd / "build"

    # remove entire build folder if it exists
    if(build_dir.exists()):
        shutil.rmtree(build_dir)
    build_dir.mkdir()

    if args.driver not in installed_drivers:
        driver_configure(args.driver, build_dir)

    overlay_configure(args.driver, build_dir)

    with open(build_dir / "Makefile", "w") as f:
        content = "SHELL := /bin/bash\ndirs := $(shell find . -maxdepth 1 -mindepth 1 -type d -not -path '*/\\.*')\n"
        content += "dir_names := $(dirs:./%=%)\nall:\n"
        content += "\t@for dir in ${dir_names}; do cd $${dir} && make && cd ../ ; done\ninstall:\n"
        content += "\t@for dir in ${dir_names}; do cd $${dir} && make install && cd ../ ; done\n"
        f.write(content)
    print("Build setup complete. run:\n", "============================", "cd build", "make", "sudo make install", "============================\n", sep="\n")
